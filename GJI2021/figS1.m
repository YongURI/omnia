function figS1
% FIGS1
%
% Staggers the labels auto-generated by cpsac2evt.m to beautify for the paper.
%
% Developed as: simon2020_reviewevt.m
%
% Author: Joel D. Simon
% Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
% Last modified: 17-Mar-2021, Version 9.3.0.948333 (R2017b) Update 9 on MACI64

clc
close all

% Define paths.
merdir = getenv('MERMAID');
procdir = fullfile(merdir, 'processed');
evtdir = fullfile(merdir, 'events');

% Ensure in GJI21 git branch -- complimentary paper w/ same data set.
startdir = pwd;
cd(procdir)
system('git checkout GJI21');
cd(evtdir)
system('git checkout GJI21');
cd(startdir)

s = fullsac('20190703T034602.08_5D1F627A.MER.DET.WLT5.sac', procdir);

F = plotit(s);

txfs = 15;
tlfs = 20;
F.f.ha(1).Title.FontSize = tlfs;

for i = 1:length(F.f.ha)
    set(F.f.ha(i), 'FontSize', txfs-3);
    set(F.f.ha(i).XLabel, 'FontSize', txfs);
    set(F.f.ha(i).YLabel, 'FontSize', txfs);


    F.f.ha(i).YRuler.Exponent = 0;
    numticks(F.f.ha(i), 'y', 3)
    F.f.ha(i).YRuler.TickLabelFormat = '%.0e';
    F.f.ha(i).YRuler.TickLabel{2} = '$0$';
    F.f.ha(i).YRuler.TickLabels = strrep(F.f.ha(i).YRuler.TickLabels, '\times10^', '\mathrm{e}');
end

for i = 1:length(F.f.ha2)
    set(F.f.ha2(i), 'FontSize', txfs-3);
    set(F.f.ha2(i).XLabel, 'FontSize', txfs);
    set(F.f.ha2(i).YLabel, 'FontSize', txfs);


    F.f.ha2(i).YRuler.Exponent = 0;
    numticks(F.f.ha2(i), 'y', 3)
    F.f.ha2(i).YRuler.TickLabelFormat = '%#.2e';
    F.f.ha2(i).YRuler.TickLabels = strrep(F.f.ha2(i).YRuler.TickLabels, '\times10^', '\mathrm{e}');

end

F.f.ha(1).Title.FontSize = tlfs;

for i = 1:length(F(1).tx)
    for j = 1:length(F(1).tx{i})
        set(F(1).tx{i}{j}, 'FontSize', txfs)

    end
end

F.tx{1}{1}.FontSize = tlfs;
F.tx{1}{1}.Color = 'r';

F.tx{5}{1}.Position(1) = 26;
F.tx{2}{2}.Position = [163 3500000];
F.tx{3}{2}.Position = [144 3500000];
F.tx{5}{1}.Position(1) = 28;

set(F.f.ha, 'FontSize',txfs)
set(F.f.ha2, 'FontSize',txfs)
savepdf('figS1')

%%______________________________________________________________________________________%%
%%______________________________________________________________________________________%%
function F = plotit(sac)

% Generate a changepoint (arrival time) structure considering the
% entire seismogram.
[x, h] = readsac(sac);
[~, EQ] = getevt(sac);  %% raw EQ used for matching!!!!
CP = getcp(sac);
[~, ~, ~, refdate] = seistime(h);

% Some plotting defaults.
LineWidth = 1;

% Plot arrival times for all scales -- in case of time-scale domain,
% smooth by setting abe/dbe to central point of the time smear.
F.fig = figure;
F.f = plotchangepoint(CP, 'all', 'ar', false, true);

set(F.f.ha, 'XLim', [0 200])
set(F.f.ha2, 'XLim', [0 200])

set(F.f.ha, 'XTick', [0:20:200])

set(F.f.ha(2:end-1), 'XTickLabels', [])
set(F.f.ha2(2:end-1), 'XTickLabels', [])

% Shrink the distance between each subplot -- 'multiplier' is adjusted
% depending on the number of subplots (the number of wavelet scales
% plotted).
multiplier = 0;
for l = 1:length(F.f.ha)
    multiplier = multiplier + 1;
    movev(F.f.ha(l), multiplier * 0.015);

end
movev(F.f.ha, -0.1)

% Remove x-tick labels from all but last plot and label the lower x-axis.
set(F.f.ha(1:end-1), 'XTickLabel', '')

% Title the seismogram (first subplot).
ax = F.f.ha(1);
hold(ax, 'on')
F.tl = title(ax, titlecase(EQ(1).FlinnEngdahlRegionName), 'FontWeight', 'normal');
F.tl.Position(2) = ax.YLim(2) + 0.4*range(ax.YLim);

% Mark all arrivals on the seismogram (first subplot).
for j = 1:length(EQ)
    for k = 1:length(EQ(j).TaupTimes)
        tp = EQ(j).TaupTimes(k);
        tparr = tp.truearsecs;

        if tparr >= CP.outputs.xax(1) && ...
                    tparr <= CP.outputs.xax(end)
            F.tp{j}{k} = plot(ax, repmat(tparr, [1, 2]), ...
                              ax.YLim, 'k--', 'LineWidth', LineWidth);
            phstr = sprintf('\\textit{%s}$_{%i}$', tp.phaseName, j);
            F.tx{j}{k} = text(ax, tparr, 0, phstr, 'HorizontalAlignment', ...
                              'Center');
            F.tx{j}{k}.Position(2) = ax.YLim(2) + 0.2*range(ax.YLim);

        else
            F.tp{j}{k} = [];
            F.tx{j}{k} = [];

        end
    end
end
hold(ax, 'off')

% Highlight the first-arriving phase associated with the largest event.
if ~isempty(F.tp{1}{1})
    F.tp{1}{1}.Color = 'r';
    F.tp{1}{1}.LineStyle = '-';
    F.tp{1}{1}.LineWidth = 2*LineWidth;
    F.tx{1}{1}.Position(2) = ax.YLim(2) + 0.3*range(ax.YLim);
    %    F.tx{1}{1}.FontSize = 1.25*fs;
    F.tx{1}{1}.FontWeight = 'bold';

end

% Make the magnitude string.
magtype = lower(EQ(1).PreferredMagnitudeType);
if strcmp(magtype, 'Mww')
    magtype = 'Mw';

end
if ~strcmpi(magtype(1:2), 'mb')
    magstr = sprintf('\\textit{%s}$_{\\mathrm{%s}}$ %2.1f', upper(magtype(1)), ...
                     lower(magtype(2)), EQ(1).PreferredMagnitudeValue);

else
    magstr = sprintf('\\textit{%s}$_{\\mathrm{%s}}$ %2.1f', lower(magtype(1)), ...
                     lower(magtype(2:end)), EQ(1).PreferredMagnitudeValue);

end
depthstr = sprintf('%.2f~km', EQ(1).PreferredDepth);
diststr = sprintf('%.2f$^{\\circ}$', EQ(1).TaupTimes(1).distance);
merstr = sprintf('P0%s', getmerser(EQ(1).Filename));

[F.f.lgmag, F.f.lgmagtx] = textpatch(ax, 'NorthWest', magstr);
[F.f.lgdist, F.lgdisttx] = textpatch(ax, 'SouthWest', [ depthstr ', ' diststr ', ' merstr]);

% This time is w.r.t. the reference time in the SAC header, NOT
% seisdate.B. CP.xax has the time of the first sample (input:
% pt0) assigned to h.B, meaning it is an offset from some
% reference (in this case, the reference time in the SAC
% header).  The time would be relative to seisdate.B if I had
% input pt0 = 0, because seisdate.B is EXACTLY the time at the
% first sample, i.e., we start counting from 0 at that time.

F.f.ha(end).XLabel.String = sprintf('Time relative to %s UTC (s)',  datestr(refdate));
% F.f.ha(end).XLabel.String = sprintf('Time relative to %s UTC (s)\n[%s]', ...
%                                     datestr(refdate), ...
%                                     strippath(strrep(sac, '_', '\_')));
longticks(F.f.ha, 3);


% Set interpreter to LaTeX and fonts to Times.
latimes

% The axes have been shifted -- need to adjust the second (AIC) adjust
% and re-tack2corner the annotations.
for l = 1:length(F.f.ha)
    numticks(F.f.ha(l), 'y', 3);
    numticks(F.f.ha2(l), 'y', 3);

    F.f.ha2(l).Position = F.f.ha(l).Position;

end

% Ensure vertical lines extend minmax adjusted axes (don't wrap into loop above;
% there is one less .vl than axes handle, ha).
for j = 1:length(F.f.pl.vl)
    F.f.pl.vl{j}.YData = F.f.pl.vl{j}.Parent.YLim;

end

if ~isempty(EQ)
    tack2corner(F.f.ha(1), F.f.lgmag, 'NorthWest');
    tack2corner(F.f.ha(1), F.f.lgdist, 'SouthWest');

    for l = 1:length(F.f.lgSNR)
        tack2corner(F.f.ha(l+1), F.f.lgSNR(l), 'SouthWest');

    end
end
